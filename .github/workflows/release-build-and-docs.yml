name: Build release artifacts and deploy docs on GitHub Pages

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-windows-x86_64:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: git mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-doxygen mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-libxml2 mingw-w64-ucrt-x86_64-libsoup3 mingw-w64-ucrt-x86_64-gssdp
      - name: Cache build directory
        uses: actions/cache@v4
        with:
          path: ./build
          key: cache-${{ github.sha }}
          enableCrossOsArchive: true
      - name: Configure CMake
        run: cmake -B ./build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/ -DDOCS=on
      - name: Build
        run: cmake --build ./build
      - name: Package
        run: |
          VER=${GITHUB_REF_NAME#v}
          echo "VER=$VER" >> $GITHUB_ENV
          DESTDIR=rokuecp-${VER} cmake --install ./build
          cp -rv ./build/html rokuecp-${VER}/docs
          cp -v LICENSE rokuecp-${VER}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rokuecp-${{ github.ref_name }}_windows-x86_64-msys2-ucrt64
          path: rokuecp-*

  build-windows-arm64:
    runs-on: windows-11-arm
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANGARM64
          update: true
          install: git mingw-w64-clang-aarch64-cmake mingw-w64-clang-aarch64-doxygen mingw-w64-clang-aarch64-gcc mingw-w64-clang-aarch64-libxml2 mingw-w64-clang-aarch64-libsoup3 mingw-w64-clang-aarch64-gssdp
      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/ -DDOCS=on
      - name: Build
        run: cmake --build build
      - name: Package
        run: |
          VER=${GITHUB_REF_NAME#v}
          echo "VER=$VER" >> $GITHUB_ENV
          DESTDIR=rokuecp-${VER} cmake --install build
          cp -rv build/html rokuecp-${VER}/docs
          cp -v LICENSE rokuecp-${VER}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rokuecp-${{ github.ref_name }}_windows-arm64-msys2-clangarm64
          path: rokuecp-*

  build-macos-x86_64:
    runs-on: macos-13
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: brew update && brew install doxygen gssdp libsoup libxml2
      - name: Configure CMake
        run: PKG_CONFIG_PATH=/usr/local/opt/libxml2/lib/pkgconfig cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/ -DDOCS=on
      - name: Build
        run: cmake --build build
      - name: Package tarball
        run: |
          VER=${GITHUB_REF_NAME#v}
          echo "VER=$VER" >> $GITHUB_ENV
          DESTDIR=rokuecp-${VER} cmake --install build
          cp -rv build/html rokuecp-${VER}/docs
          cp -v LICENSE rokuecp-${VER}
          tar czvf rokuecp-${VER}_macos-x86_64.tar.gz rokuecp-${VER}
      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rokuecp-${{ github.ref_name }}_macos-x86_64.tar.gz
          path: rokuecp-*_macos-x86_64.tar.gz

  build-macos-arm64:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: brew update && brew install doxygen gssdp libsoup libxml2
      - name: Configure CMake
        run: PKG_CONFIG_PATH=/opt/homebrew/opt/libxml2/lib/pkgconfig cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/ -DDOCS=on
      - name: Build
        run: cmake --build build
      - name: Package tarball
        run: |
          VER=${GITHUB_REF_NAME#v}
          echo "VER=$VER" >> $GITHUB_ENV
          DESTDIR=rokuecp-${VER} cmake --install build
          cp -rv build/html rokuecp-${VER}/docs
          cp -v LICENSE rokuecp-${VER}
          tar czvf rokuecp-${VER}_macos-arm64.tar.gz rokuecp-${VER}
      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rokuecp-${{ github.ref_name }}_macos-arm64.tar.gz
          path: rokuecp-*_macos-arm64.tar.gz

  # Disabled until Ubuntu LTS gets libxml2 2.13
  # build-linux-x86_64:
  #   runs-on: ubuntu-26.04
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Install dependencies
  #       run: sudo apt-get update && sudo apt-get -y install doxygen libgssdp-1.6-dev libsoup-3.0-dev libxml2-dev
  #     - name: Configure CMake
  #       run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/ -DDOCS=on
  #     - name: Build
  #       run: cmake --build build
  #     - name: Package tarball
  #       run: |
  #         VER=${GITHUB_REF_NAME#v}
  #         echo "VER=$VER" >> $GITHUB_ENV
  #         DESTDIR=rokuecp-${VER} cmake --install build
  #         cp -rv build/html rokuecp-${VER}/docs
  #         cp -v LICENSE rokuecp-${VER}
  #         tar czvf rokuecp-${VER}_linux-x86_64.tar.gz rokuecp-${VER}
  #     - name: Upload tarball as artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: rokuecp-${{ github.ref_name }}_linux-x86_64.tar.gz
  #         path: rokuecp-*_linux-x86_64.tar.gz
  #
  # build-linux-arm64:
  #   runs-on: ubuntu-26.04-arm
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Install dependencies
  #       run: sudo apt-get update && sudo apt-get -y install doxygen libgssdp-1.6-dev libsoup-3.0-dev libxml2-dev
  #     - name: Configure CMake
  #       run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/ -DDOCS=on
  #     - name: Build
  #       run: cmake --build build
  #     - name: Package tarball
  #       run: |
  #         VER=${GITHUB_REF_NAME#v}
  #         echo "VER=$VER" >> $GITHUB_ENV
  #         DESTDIR=rokuecp-${VER} cmake --install build
  #         cp -rv build/html rokuecp-${VER}/docs
  #         cp -v LICENSE rokuecp-${VER}
  #         tar czvf rokuecp-${VER}_linux-arm64.tar.gz rokuecp-${VER}
  #     - name: Upload tarball as artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: rokuecp-${{ github.ref_name }}_linux-arm64.tar.gz
  #         path: rokuecp-*_linux-arm64.tar.gz

  deploy-docs:
    runs-on: ubuntu-latest
    # Change to build-linux-x86_64 when it's enabled
    needs: build-windows-x86_64
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Get build from cache
        uses: actions/cache@v4
        with:
          path: ./build
          key: cache-${{ github.sha }}
          # Remove when Linux build is enabled
          enableCrossOsArchive: true
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: ./build/html
          target-folder: ${{ github.ref_name }}
